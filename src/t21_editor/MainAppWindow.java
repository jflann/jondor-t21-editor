/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainAppWindow.java
 *
 * Created on Nov 2, 2010, 7:58:29 PM
 */

package t21_editor;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import jwb.jdbpf.DBPFFile;
import jwb.jdbpf.properties.DBPFStringProperty;
import jwb.jdbpf.util.DBPFUtil;

/**
 *
 * @author Jon
 */
public class MainAppWindow extends javax.swing.JFrame {

    /** Creates new form MainAppWindow */
    public MainAppWindow() {
        t21ExplorerBacking = new T21ExplorerTableModel();
        propExplorerBacking = new PropExplorerTableModel();
        initComponents();
        
        editMenu.setVisible(false);
        windowMenu.setVisible(false);

        String s = SettingsManager.getSetting(SettingsManager.CURRENTDIR);
        if(s != null) {
            File currentDir = new File(s);
            if(currentDir.exists() && currentDir.isDirectory())
                fileChooser.setCurrentDirectory(currentDir);
        }
        fileChooser.setFileFilter(datFilter);
        progContainer.setVisible(false);
    }

    public void showT21Explorer() {
        t21ExplorerFrame.setVisible(true);
    }

    public void showPropExplorer() {
        propExplorerFrame.setVisible(true);
    }

    public T21ExplorerWindow getActiveT21() {
        return activeT21;
    }

    public void setActiveT21(T21ExplorerWindow activeT21) {
        if(activeT21 == null) {
            saveMenuItem.setEnabled(false);
            saveAsMenuItem.setEnabled(false);
        } else {
            saveMenuItem.setEnabled(true);
            saveAsMenuItem.setEnabled(true);
        }
        this.activeT21 = activeT21;
    }
    
    public void closeFile(File filename) {
        if(t21Explorers.containsKey(filename)) {
            T21ExplorerWindow t21 = t21Explorers.remove(filename);
            if(activeT21 == t21)
                activeT21 = null;
            t21.dispose();
            this.desktopPane.remove(t21);
            this.desktopPane.selectFrame(true);
        }
    }
    
    private void closeProgram() {
        boolean flag = false;
        for(T21ExplorerWindow t21 : t21Explorers.values()) {
            if(t21.isModified()) {
                flag = true;
                break;
            }
        }
        if(flag) {
            int choice = JOptionPane.showConfirmDialog(this, "Save files before exiting?", "Save Files", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(choice == JOptionPane.YES_OPTION)
            {
                for(T21ExplorerWindow t21 : t21Explorers.values()) {
                    if(t21.isModified()) {
                        if(!t21.forceSave()) {
                            JOptionPane.showMessageDialog(this, "Error saving " + t21.getFile().getName() + ", please try saving to another filename.", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }
            } else if(choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        SettingsManager.writeSettings();
        System.exit(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        desktopPane = new javax.swing.JDesktopPane();
        propExplorerFrame = new javax.swing.JInternalFrame();
        propExplorerScrollPane = new javax.swing.JScrollPane();
        propExplorerTable = new javax.swing.JTable();
        t21ExplorerFrame = new javax.swing.JInternalFrame();
        t21ExplorerScrollPane = new javax.swing.JScrollPane();
        t21ExplorerTable = new javax.swing.JTable();
        statusBar = new javax.swing.JPanel();
        progContainer = new javax.swing.JPanel();
        progBar = new javax.swing.JProgressBar();
        filenameLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        fileMenuSep0 = new javax.swing.JPopupMenu.Separator();
        settingsMenuItem = new javax.swing.JMenuItem();
        fileMenuSep1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        t21ExplorerMenuItem = new javax.swing.JMenuItem();
        propExplorerMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("T21 Editor");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        desktopPane.setPreferredSize(new java.awt.Dimension(1024, 768));

        propExplorerFrame.setClosable(true);
        propExplorerFrame.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        propExplorerFrame.setIconifiable(true);
        propExplorerFrame.setMaximizable(true);
        propExplorerFrame.setResizable(true);
        propExplorerFrame.setTitle("Prop Explorer");

        propExplorerScrollPane.setPreferredSize(new java.awt.Dimension(644, 444));

        propExplorerTable.setAutoCreateRowSorter(true);
        propExplorerTable.setModel(propExplorerBacking);
        propExplorerTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        propExplorerTable.setFillsViewportHeight(true);
        propExplorerTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        propExplorerTable.setShowHorizontalLines(false);
        propExplorerTable.setShowVerticalLines(false);
        propExplorerTable.getTableHeader().setReorderingAllowed(false);
        propExplorerScrollPane.setViewportView(propExplorerTable);

        javax.swing.GroupLayout propExplorerFrameLayout = new javax.swing.GroupLayout(propExplorerFrame.getContentPane());
        propExplorerFrame.getContentPane().setLayout(propExplorerFrameLayout);
        propExplorerFrameLayout.setHorizontalGroup(
            propExplorerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(propExplorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
        propExplorerFrameLayout.setVerticalGroup(
            propExplorerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(propExplorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );

        propExplorerFrame.setBounds(100, 60, 650, 470);
        desktopPane.add(propExplorerFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        t21ExplorerFrame.setClosable(true);
        t21ExplorerFrame.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        t21ExplorerFrame.setIconifiable(true);
        t21ExplorerFrame.setMaximizable(true);
        t21ExplorerFrame.setResizable(true);
        t21ExplorerFrame.setTitle("T21 Explorer");

        t21ExplorerScrollPane.setPreferredSize(new java.awt.Dimension(644, 444));

        t21ExplorerTable.setAutoCreateRowSorter(true);
        t21ExplorerTable.setModel(t21ExplorerBacking);
        t21ExplorerTable.setFillsViewportHeight(true);
        t21ExplorerTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        t21ExplorerTable.setShowHorizontalLines(false);
        t21ExplorerTable.setShowVerticalLines(false);
        t21ExplorerTable.getTableHeader().setReorderingAllowed(false);
        t21ExplorerScrollPane.setViewportView(t21ExplorerTable);

        javax.swing.GroupLayout t21ExplorerFrameLayout = new javax.swing.GroupLayout(t21ExplorerFrame.getContentPane());
        t21ExplorerFrame.getContentPane().setLayout(t21ExplorerFrameLayout);
        t21ExplorerFrameLayout.setHorizontalGroup(
            t21ExplorerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(t21ExplorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
        t21ExplorerFrameLayout.setVerticalGroup(
            t21ExplorerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(t21ExplorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );

        t21ExplorerFrame.setBounds(20, 20, 650, 470);
        desktopPane.add(t21ExplorerFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        statusBar.setPreferredSize(new java.awt.Dimension(800, 20));

        progContainer.setPreferredSize(new java.awt.Dimension(300, 20));

        progBar.setIndeterminate(true);
        progBar.setPreferredSize(new java.awt.Dimension(75, 20));
        progBar.setString("Analyzing");
        progBar.setStringPainted(true);

        filenameLabel.setText("Loading...");

        javax.swing.GroupLayout progContainerLayout = new javax.swing.GroupLayout(progContainer);
        progContainer.setLayout(progContainerLayout);
        progContainerLayout.setHorizontalGroup(
            progContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progContainerLayout.createSequentialGroup()
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filenameLabel)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        progContainerLayout.setVerticalGroup(
            progContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progContainerLayout.createSequentialGroup()
                .addGroup(progContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filenameLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addComponent(progContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(724, Short.MAX_VALUE))
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addComponent(progContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(statusBar, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setEnabled(false);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(fileMenuSep0);

        settingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(settingsMenuItem);
        fileMenu.add(fileMenuSep1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        windowMenu.setText("Window");

        t21ExplorerMenuItem.setText("T21 Explorer");
        t21ExplorerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t21ExplorerMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(t21ExplorerMenuItem);

        propExplorerMenuItem.setText("Prop Explorer");
        propExplorerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propExplorerMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(propExplorerMenuItem);

        menuBar.add(windowMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        closeProgram();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void t21ExplorerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t21ExplorerMenuItemActionPerformed
        t21ExplorerFrame.setVisible(!t21ExplorerFrame.isVisible());
    }//GEN-LAST:event_t21ExplorerMenuItemActionPerformed

    private void propExplorerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propExplorerMenuItemActionPerformed
        propExplorerFrame.setVisible(!propExplorerFrame.isVisible());
    }//GEN-LAST:event_propExplorerMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        
        int result = fileChooser.showOpenDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION) {
            File filename = fileChooser.getSelectedFile();
            if(!t21Explorers.containsKey(filename)) {
                if(DBPFFile.Reader.checkFileType(filename)) {
                    final LoadingDialog dialog = new LoadingDialog(this, false, "Loading " + filename.getPath());
                    T21Loader loader = new T21Loader(filename, dialog);
                    loader.addPropertyChangeListener(new PropertyChangeListener() {

                        @Override
                        public void propertyChange(PropertyChangeEvent pce) {
                            if ("progress".equals(pce.getPropertyName())) {
                                dialog.progBar.setIndeterminate(false);
                                dialog.progBar.setValue((Integer)pce.getNewValue());
                                dialog.progBar.setString(pce.getNewValue().toString() + "%");
                            }
                        }
                    });
                    dialog.setVisible(true);

                    loader.execute();
                } else {
                    JOptionPane.showMessageDialog(this, "Not a valid DBPF File!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                T21ExplorerWindow t21Win = t21Explorers.get(filename);
                t21Win.setVisible(true);
                t21Win.moveToFront();
                try {
                    t21Win.setSelected(true);
                } catch (PropertyVetoException e) {
                    //Bad Java, Select my stupid frame
                }
            }
            SettingsManager.putSetting(SettingsManager.CURRENTDIR, fileChooser.getCurrentDirectory().getPath());
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if(activeT21 != null)
            if(activeT21.saveFile(null) == T21ExplorerWindow.SaveState.FAILED)
                JOptionPane.showMessageDialog(this, "Error saving the file, please try saving to another filename.", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if(activeT21 != null) {
            int result = fileChooser.showSaveDialog(this);
            if(result == JFileChooser.APPROVE_OPTION) {
                File oldFile = activeT21.getFile();
                File filename = fileChooser.getSelectedFile();
                if(t21Explorers.containsKey(filename)) {
                    JOptionPane.showMessageDialog(this, "That file is already open, cannot overwrite it.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                T21ExplorerWindow.SaveState ss = activeT21.saveFile(filename);
                if(ss == T21ExplorerWindow.SaveState.SAVED) {
                    t21Explorers.remove(oldFile);
                    t21Explorers.put(filename, activeT21);
                } else if(ss == T21ExplorerWindow.SaveState.FAILED) {
                    JOptionPane.showMessageDialog(this, "Error saving the file, please try saving to another filename.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                SettingsManager.putSetting(SettingsManager.CURRENTDIR, fileChooser.getCurrentDirectory().getPath());
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeProgram();
    }//GEN-LAST:event_formWindowClosing

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        T21Editor.settingsDiag.setVisible(true);
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileMenuSep0;
    private javax.swing.JPopupMenu.Separator fileMenuSep1;
    public javax.swing.JLabel filenameLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    public javax.swing.JProgressBar progBar;
    public javax.swing.JPanel progContainer;
    private javax.swing.JInternalFrame propExplorerFrame;
    private javax.swing.JMenuItem propExplorerMenuItem;
    private javax.swing.JScrollPane propExplorerScrollPane;
    private javax.swing.JTable propExplorerTable;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JPanel statusBar;
    private javax.swing.JInternalFrame t21ExplorerFrame;
    private javax.swing.JMenuItem t21ExplorerMenuItem;
    private javax.swing.JScrollPane t21ExplorerScrollPane;
    private javax.swing.JTable t21ExplorerTable;
    private javax.swing.JMenu windowMenu;
    // End of variables declaration//GEN-END:variables

    T21ExplorerTableModel t21ExplorerBacking;
    PropExplorerTableModel propExplorerBacking;

    private FileNameExtensionFilter datFilter = new FileNameExtensionFilter("DBPF files", "dat", "SC4Lot", "SC4Desc", "SC4Model");
    private HashMap<File, T21ExplorerWindow> t21Explorers = new HashMap<>();
    private T21ExplorerWindow activeT21;
    
    public class T21Loader extends SwingWorker<T21ExplorerWindow, Void> {

        private File filename;
        private LoadingDialog dialog;

        public T21Loader(File filename, LoadingDialog dialog) {
            this.filename = filename;
            this.dialog = dialog;
        }
        
        @Override
        protected T21ExplorerWindow doInBackground() {
            return new T21ExplorerWindow(filename, this);
        }

        @Override
        protected void done() {
            try {
                T21ExplorerWindow t21Win = this.get();
                dialog.dispose();
                desktopPane.add(t21Win);
                t21Explorers.put(filename, t21Win);
                t21Win.setVisible(true);
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace(System.err);
            }
        }
        
        public void updateProgress(int prog) {
            this.setProgress(prog);
        }
    }

    class PropExplorerTableModel extends javax.swing.table.AbstractTableModel {

        public ArrayList<ExemplarEncapsulator> backingStore = new ArrayList<>();

        @Override
        public String getValueAt(int row, int col){
            ExemplarEncapsulator exEncap = backingStore.get(row);
            switch(col) {
                case 0:
                    DBPFStringProperty stringProp = (DBPFStringProperty) exEncap.ex.getProperty(0x20L);
                    return (stringProp != null ? stringProp.getValue() : "---");
                case 1:
                    String hex = DBPFUtil.toHex(exEncap.ex.getIID(), 8);
                    return "0x" + hex;
                case 2:
                    return exEncap.filename.getName();
                default:
                    return "---";
            }
        }

        @Override
        public int getColumnCount(){
            return 3;
        }

        @Override
        public String getColumnName(int col){
            switch(col) {
                case 0:
                    return "Prop Name";
                case 1:
                    return "Instance ID";
                case 2:
                    return "File Name";
                default:
                    return "---";
            }
        }

        @Override
        public Class getColumnClass(int col) {
            switch(col) {
                case 0:
                    return String.class;
                case 1:
                    return Long.class;
                case 2:
                    return String.class;
                default:
                    return Object.class;
            }
        }

        @Override
        public int getRowCount(){
            return backingStore.size();
        }
    }
}
