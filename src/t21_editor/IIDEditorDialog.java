/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IIDEditorDialog.java
 *
 * Created on Feb 27, 2012, 9:12:49 PM
 */
package t21_editor;

import java.awt.event.KeyEvent;
import java.util.regex.Matcher;
import jwb.jdbpf.util.DBPFUtil;

/**
 *
 * @author Jon
 */
public class IIDEditorDialog extends javax.swing.JDialog {

    /** Creates new form IIDEditorDialog */
    IIDEditorDialog(T21EditWindow parent, T21EditWindow.PropFloraEncap pfe, java.awt.Frame parentFrame) {
        super(parentFrame, true);
        this.parent = parent;
        this.pfe = pfe;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iidPanel = new javax.swing.JPanel();
        iidScroller = new javax.swing.JScrollPane();
        iidTable = new javax.swing.JTable();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        iidPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        iidPanel.setLayout(new java.awt.BorderLayout());

        iidScroller.setPreferredSize(new java.awt.Dimension(150, 150));

        iidTable.setModel(tableModel);
        iidTable.getTableHeader().setReorderingAllowed(false);
        iidTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                iidTableKeyPressed(evt);
            }
        });
        iidScroller.setViewportView(iidTable);

        iidPanel.add(iidScroller, java.awt.BorderLayout.CENTER);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        iidPanel.add(closeButton, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(iidPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(iidPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_formKeyPressed

    private void iidTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iidTableKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_iidTableKeyPressed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel iidPanel;
    private javax.swing.JScrollPane iidScroller;
    private javax.swing.JTable iidTable;
    // End of variables declaration//GEN-END:variables

    private T21EditWindow parent;
    private T21EditWindow.PropFloraEncap pfe;
    private PropIIDEditModel tableModel = new PropIIDEditModel();
    
    private class PropIIDEditModel extends javax.swing.table.AbstractTableModel {

        @Override
        public Object getValueAt(int row, int col) {
            switch(col) {
                case 0:
                    if(row >= getRowCount() - 1)
                        return "Add New";
                    else
                        return row + 13;
                case 1:
                    if(row >= getRowCount() - 1)
                        return "";
                    else
                        return "0x" + DBPFUtil.toHex(pfe.IIDs.get(row).longValue(), 8);
                default:
                    return "---";
            }
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getColumnName(int col) {
            switch(col) {
                case 0:
                    return "Rep";
                case 1:
                    return "IID";
                default:
                    return "---";
            }
        }

        @Override
        public Class getColumnClass(int col) {
            return String.class;
        }

        @Override
        public int getRowCount() {
            return 1 + pfe.IIDs.size();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 1;
        }

        @Override
        public void setValueAt(Object o, int row, int col) {
            String s = o.toString();
            boolean modified = false;
            boolean rowsChanged = false;
            if(col == 1) {
                Matcher m = parent.hexPattern.matcher(s);
                if(m.matches()) {
                    long newL = Math.min(Long.parseLong(m.group(2), 16), 0xFFFFFFFFL);
                    if(row >= getRowCount() - 1) {
                        modified = true;
                        pfe.IIDs.add(Long.valueOf(newL));
                        rowsChanged = true;
                    } else {
                        modified = (pfe.IIDs.get(row).longValue() != newL);
                        pfe.IIDs.set(row, Long.valueOf(newL));
                        if(row == 0)
                            parent.propIIDEditorText.setText("0x" + DBPFUtil.toHex(newL, 8));
                    }
                } else if(s.isEmpty()) {
                    if(row < getRowCount() - 1) {
                        modified = true;
                        pfe.IIDs.remove(row);
                        rowsChanged = true;
                    }
                }
            }
            if(modified)
                parent.setModified(true);
            if(rowsChanged)
                this.fireTableDataChanged();
            else
                this.fireTableCellUpdated(row, col);
        }
    }
}
